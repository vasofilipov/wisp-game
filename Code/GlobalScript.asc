//-------------------------------------------------------------------------------
// Legal Disclaimer: Verb-Coin-GUI Graphics for Adventure Game Studio 3.0
//-------------------------------------------------------------------------------
//
// All graphics are created by Misj' in CorelDraw X3. These images 
// are not in public domain, but may be used for GUI-templates for 
// AGS (as well as AGS games using that GUI). The images may not be 
// altered without permission of the author (with the exception of 
// file type conversions, and alterations to the empty inventory 
// sprite to create additional inventory items).
//
// If you have created a GUI using these graphics, and you would 
// like to acknowledged me, do so at the location of distribution, 
// or in a text-file accompanying the GUI (or not at all ;) ).
//
// These graphics were created as a gift to the AGS community, and 
// Chris Jones - creator of the Adventure Game Studio - in particular.
//
// Have fun adventuring,
//
// Misj'
// 23.10.2007
//
//-----------------------------------------------------------------------------
//
// AGS Website: http://www.adventuregamestudio.co.uk/
// Verb-Coin-GUI for AGS 3.0 forum location: http://new.bigbluecup.com/yabb/index.php?topic=32745.0
//
//-------------------------------------------------------------------------------

// main global script file

int item_count = 10;  //how many inventory items fit in your inventory screen? *!*

function game_start() 
{ // called when the game starts, before the first room is loaded
  SCUMM_VERBCOIN_GUI.Item_Count(10);  //how many inventory items fit in your inventory screen? *!*
  SCUMM_VERBCOIN_GUI.Inv_Border_active(true, true); //inventory exit borders 
  SCUMM_VERBCOIN_GUI.Inv_Border_SetPos(20, 220, 20, 295);  //x- and y-coördinates of the exit borders 
  SCUMM_VERBCOIN_GUI.verbgraphic(bIdle, 1);
  SCUMM_VERBCOIN_GUI.verbgraphic(bTalk, 2);
  SCUMM_VERBCOIN_GUI.verbgraphic(bLook, 3);
  SCUMM_VERBCOIN_GUI.verbgraphic(bInteract, 4);
  SCUMM_VERBCOIN_GUI.verbgraphic(bCustom1, 0);
  SCUMM_VERBCOIN_GUI.verbgraphic(bCustom2, 0);
  SCUMM_VERBCOIN_GUI.verbgraphic(bCustom3, 0);
  SCUMM_VERBCOIN_GUI.Inventory_GUI(gInventory.ID, gInvUnderlay.ID);
  SCUMM_VERBCOIN_GUI.Verbcoin_GUI(gVerbCoin.ID);
  SCUMM_VERBCOIN_GUI.DoubleClickSpeed(GetGameSpeed()/4);
  SCUMM_VERBCOIN_GUI.UseDefaultAction(true);
  SCUMM_VERBCOIN_GUI.SetDefaultAction(aLook, "Look at ");
  SCUMM_VERBCOIN_GUI.SetDefaultAction(aInteract, "Use ");
  SCUMM_VERBCOIN_GUI.SetDefaultAction(aTalk, "Talk to ");
}

function on_key_press(int keycode) {
  
  /* the GetASCIINumber retrieves the ASCII keycode, just select the key you want from the dropdown list */
  
  // Standard AGS
  
  if (keycode==GetASCIINumber(CtrlQ))  QuitGame(1);   
  if (keycode==GetASCIINumber(F5)) SaveGameDialog();   
  if (keycode==GetASCIINumber(F7)) RestoreGameDialog();
  if (keycode==GetASCIINumber(F9)) RestartGame();  
  if (keycode==GetASCIINumber(F12)) SaveScreenShot("scrnshot.bmp");
  
  
  // Debugging
  
  if (keycode==GetASCIINumber(CtrlS))  Debug(0,0);  // give all inventory
  if (keycode==GetASCIINumber(CtrlV))  Debug(1,0);  // version
  if (keycode==GetASCIINumber(CtrlA))  Debug(2,0);  // show walkable areas
  if (keycode==GetASCIINumber(CtrlX))  Debug(3,0);  // teleport to room
  
  // The SCUMM Verbcoin GUI action responses (same result as clicking the 6 buttons on the verbcoin GUI)
  
  if (keycode==GetASCIINumber(l) || keycode==GetASCIINumber(L)) SCUMM_VERBCOIN_GUI.RunInteraction(eModeLookat);
  if (keycode==GetASCIINumber(u) || keycode==GetASCIINumber(U)) SCUMM_VERBCOIN_GUI.RunInteraction(eModeInteract);
  if (keycode==GetASCIINumber(t) || keycode==GetASCIINumber(T)) SCUMM_VERBCOIN_GUI.RunInteraction(eModeTalkto);
  if (keycode==GetASCIINumber(a) || keycode==GetASCIINumber(A)) SCUMM_VERBCOIN_GUI.RunInteraction(eModeUsermode1);
  if (keycode==GetASCIINumber(b) || keycode==GetASCIINumber(B)) SCUMM_VERBCOIN_GUI.RunInteraction(eModeUsermode2);
  if (keycode==GetASCIINumber(c) || keycode==GetASCIINumber(C)) SCUMM_VERBCOIN_GUI.RunInteraction(eModePickup);
  
  // Move the cursor. Increase the value to speed up the mouse.
  
  if (keycode==GetASCIINumber(LeftArrowKey)) mouse.SetPosition(mouse.x - 5, mouse.y);
  if (keycode==GetASCIINumber(RightArrowKey)) mouse.SetPosition(mouse.x + 5, mouse.y);
  if (keycode==GetASCIINumber(UpArrowKey)) mouse.SetPosition(mouse.x, mouse.y - 5);
  if (keycode==GetASCIINumber(DownArrowKey)) mouse.SetPosition(mouse.x, mouse.y + 5);
  
  // Select item, Use an item on another item/hotspot/...
  
  if (keycode==GetASCIINumber(Space)) SCUMM_VERBCOIN_GUI.Select();
  
  // Deselect active item, quit inventory
  
  if (keycode==GetASCIINumber(Enter))  SCUMM_VERBCOIN_GUI.Deselect();
      
  // Open/close inventory   
  
  if (keycode==GetASCIINumber(Tab)) SCUMM_VERBCOIN_GUI.GoInventory();
  
  // Scroll the inventory using the keyboard
  
  if (keycode==GetASCIINumber(PgUpAndNumbericPadNine)) SCUMM_VERBCOIN_GUI.InvScroll_Left();
  if (keycode==GetASCIINumber(PgDnAndNumbericPadThree)) SCUMM_VERBCOIN_GUI.InvScroll_Right();
}

// Scroll the inventory using the buttons

function btnright_OnClick(GUIControl *control, MouseButton button)
{
  SCUMM_VERBCOIN_GUI.InvScroll_Right();
}

function btnleft_OnClick(GUIControl *control, MouseButton button)
{
  SCUMM_VERBCOIN_GUI.InvScroll_Left();
  
}

//-------------------------------------------------------------------
//	Inventory item events
//-------------------------------------------------------------------



//-------------------------------------------------------------------
//	Character events
//-------------------------------------------------------------------

function cEgo_Interact()
{
  if (doubleclick)
  {
    player.Say("It's me...");
  }
  else
  {
      player.Say("I am here...");
  }
}

function dialog_request(int param) {
}
function iUrn_Interact()
{
  player.Say("If I can get it open...");
  player.LoseInventory(iUrn);
  player.AddInventory(ihAshes);
  player.AddInventory(iKey);
  player.Say("Voila!");
  player.Say("There's a turbolift keycard in these ashes...");
  player.Say("Who in their right mind would put a keycard in an ash urn?");
}

function iUrn_Talk()
{
  player.Say("I don't want to eat that!");
}

function iUrn_Look()
{
  player.Say("This is a standart urn for human ashes, it be easily opened.");
}

function iTrans_Interact()
{
  player.Say("I don't wanna break it.");
}

function iTrans_Look()
{
  player.Say("It's a standart NX-01-1701-47 transporter control unit.");
}

function iTrans_Talk()
{
  player.Say("It tastes like freedom.");
}

function ihAshes_Interact()
{
  player.Say("That's not a toy!");
}

function ihAshes_Look()
{
  if (corpseVidited == 0)
  {
    player.Say("I wonder if my body looks like this now.");
  }
  else
  {
      player.Say("I'd hate to end up in someone's inventory like that.");
  }
}

function ihAshes_Talk()
{
  player.Say("That would be just disgusting!");
}

function iUrn_UseInv()
{
  if (player.ActiveInventory == iTrans)
  {
      player.Say("This can damage the transporter control unit.");
  }
  else
  {
      player.Say("I don't want to combine these items");
  }
}

function iTrans_UseInv()
{
  player.Say("No! This will damage the control unit!");
}

function ihAshes_UseInv()
{
  if (player.ActiveInventory == iKey)
  {
      player.Say("You just put the keycard back in the ashes, congratulations.");
      player.LoseInventory(iKey);
      player.Say("Now, I'll take it back, cause I need it now.");
      player.AddInventory(iKey);
  }
  else
  {
    player.Say("Why would I do that?!");
  }
}

function interact_button_OnClick(GUIControl *control, MouseButton button)
{

}
